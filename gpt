#!/bin/bash

#Copyright (c) 2023, Michael Baucum
#All rights reserved.

#This source code is licensed under the BSD-style license found in the
#LICENSE file in the root directory of this source tree. 

function displayHelp {
  echo "Usage: $0 [options] [message]"
  echo
  echo "Options:"
  echo "-h Display this help message."
  echo "-r Replay last message from ChatGPT."
  echo "-c <filename> Continue a specific conversation."
  echo "-C <filename> Clear an existing conversation or start a new one with the given filename."
  echo "-l List available conversations in the convos directory."
  echo "-s <message> Send a system message to ChatGPT."
  echo "-g Provide shell autocompletion."
  echo "-i Enter interactive mode."
  echo "-f <files> Read and process file(s) into the conversation."
  echo
  echo "Example:"
  echo "$(basename $0) -s \"Remember, you are chatting with a programmer.\" \"Hi, I need help with some code.\""
  echo
  exit 1
}

# This function writes to the current conversation file.
# Args: 1: role, 2: content
function appendConversation {
  # Guard against invalid roles.
  role=
  case $1 in
    user|system|assistant) role=$1;;
    *) echo "[appendConversation] Illegal role: $1. Must be either system, user, or assistant. Exitting..."
       exit;;
  esac
  shift
  local input="$@"
  # Count lines in current conversation file. Assume it's new if 0.
  if [ ! -z "$input" ]; then
    nLines=$(wc -l $CONVO | awk '{print $1}')
    if [ ${nLines} -eq 0 ]; then
      echo "{\"role\": \"$role\", \"content\": \"$@\"}" >> $CONVO
    else
      echo ", {\"role\": \"$role\", \"content\": \"$@\"}" >> $CONVO
    fi
  fi
}

function sendMsg {
  curl -s -X POST https://api.openai.com/v1/chat/completions \
    -H 'Content-Type: application/json' \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "{
          \"model\": \"gpt-4\", 
          \"messages\": [
            $(cat $CONVO)
          ] 
        }"
}

function procOutput {
  jqFilteredOutput=$(echo $@ | jq  '.choices[0].message.content')
  jqFilteredOutput=$(echo $jqFilteredOutput | sed -E 's/"(.*)"/\1/g')

  # Append user's input to the conversation ONLY IF we got good output.
  if [ ! "$jqFilteredOutput" = 'null' ]; then
    #echo -e "\\e[1;32m$(echo $jqFilteredOutput | sed -E 's/```([^\\n]*)\\n([^`]*)```/```\1\\n\\e[1;31m\2\\e[1;32m```/g; s/\\"/\"/g; s/[^`]`(.*)`[^`]/\\e[1;34m\1\\e[1;32m/g')"
    echo -e "\e[1;32m$(echo $jqFilteredOutput | sed -E 's/```([^\\n]*)\\n([^`]*)```/```\1\\n\\e[1;31m\2\\e[1;32m```/g; s/\\"/\"/g; s/([^`]`)([^`]*)(`[^`])/\1\\e[1;34m\2\\e[1;32m\3/g')"
    #echo -e "\e[0;32m$jqFilteredOutput\e[0m\n"
    appendConversation assistant $jqFilteredOutput
  else
    echo Error: $(echo $@ | jq '.error.message')
    exit 1
  fi
}

 #elif [ $prev = \"-f\" ]; then
 #COMPREPLY=($(compgen -f -- $cur))
 #elif [ $prev = \">\" -o $prev = \">>\" ]; then
 #COMPREPLY=($(compgen -f -- $cur))

AUTOCOMPLETION_CMD='\nfunction gpt_convo_autocomplete {\n\tcur="${COMP_WORDS[COMP_CWORD]}"\n\tprev="${COMP_WORDS[COMP_CWORD-1]}"\n\tif [ $prev = "-c" ]; then\n\t\tCOMPREPLY+=($(find ${HOME}/.gpt/.convos/ -type f -name "${cur}*" -exec basename {} \;))\n\telif [ $prev = "-f" ]; then\n\t\tCOMPREPLY=($(compgen -f -- $cur))\n\telif [ $prev = ">" -o $prev = ">>" ]; then\n\t\tCOMPREPLY=($(compgen -f -- $cur))\n\telse\n\t\tCOMPREPLY=()\n\tfi\n}\n\ncomplete -F gpt_convo_autocomplete gpt'


which js >/dev/null
if [ $? -ne 0 ]; then
  echo -e "$0 relies on js. Try this command:\n\tsudo apt-get install js"
  exit 1
fi

SRC_DIR=$(readlink -f $(dirname $0))

GPT_DIR=${HOME}/.gpt
if [ ! -d GPT_DIR ]; then
  mkdir -p $GPT_DIR
fi

if [ ! -e $SRC_DIR/.env ]; then
  echo -e "You need to put a .env file into $SRC first. Populate that file like so:\n\nOPENAI_API_KEY=<your API key>\n"
  exit 1
fi
source .env
CON_DIR=${GPT_DIR}/.convos
IS_INTERACTIVE=false
if [ ! -d $CON_DIR ]; then
  mkdir -p $CON_DIR
fi

# If you want to continue a previous conversation, you can keep talking using the sym-linked file.
# Otherwise, if you want to send a bunch of messages in parallel, you'll want to give each parallelized
# message its own conversation to live in.
CONVO=$GPT_DIR/convo
SYS_MSG=
FILES_TO_READ=()

function getLastMsg() {
  echo "[$(cat $CONVO)]" | jq '.[-1].content' 
}

# TODO to be safe, we could have a fixed, conservative number of lines from any text file populate a message. 
# We'll test this out with a file I know well. I'll have it look through xRender.c and tell me to list all 
# of its functions and summarize what each one of them does without worrying about externals.
# Allow the user to resume any conversation.
while getopts \"XxmMhrf:igs:c:lC:\" _opt; do
  case $_opt in
    # Replay last message from ChatGPT.
    r)
    echo -e "\e[1;32m$(echo "[$(cat $CONVO)]" | jq '.[-1].content' | sed -E 's/```([^\\n]*)\\n([^`]*)```/```\1\\n\\e[1;31m\2\\e[1;32m```/g; s/\\"/\"/g; s/([^`]`)([^`]*)(`[^`])/\1\\e[1;34m\2\\e[1;32m\3/g')"
    exit
    ;;
    # Switch to another conversation. If it exists, we'll resume that one.
    # Otherwise, it starts a new one.
    c)
    if [ ! -e $CON_DIR/${OPTARG} ]; then
      touch $CON_DIR/${OPTARG}
    fi
    CONVO=$CON_DIR/${OPTARG}
    rm -f $GPT_DIR/convo 2>/dev/null
    ln -s $CON_DIR/${OPTARG} $GPT_DIR/convo 2>/dev/null
    for f in \"${FILES_TO_READ[@]}\"; do
      if [ ! -z \"$f\" -a -e \"$f\" ]; then
        nLines=$(wc -l $f | awk '{print $1}')
        cLine=1
        while [ $cLine -lt $nLines ]; do
          toLine=$((cLine + 999))
          textBatch=\"$(sed -n $cLine,${toLine}p $f)\"
          textBatch=$(echo $textBatch | sed -z 's/\\([\\r\\t\\f\\"\$\\\\]\\)/\\\\\\1/g;')
          textBatch=$(echo $textBatch | jq -sRr @json | sed -E 's/\\"(.*)\\"/\\1/g')
          if [ $cLine -eq 1 ]; then
            appendConversation user \"remember this: $textBatch\"
          else
            appendConversation user \"also remember this: $textBatch\"
          fi
          ((cLine += 1000))
        done
      fi
    done
    FILES_TO_READ=()
    ;;
  # Make a file containing all code found in GPTs latest message. TODO filter by filetype
  m) 
    echo "[$(cat $CONVO)]" | jq '.[-1].content' | sed -n -E 's/.*```[a-z]*\\n(.*)\\n```.*/\1\nif [ $? -ne 0 ]; then\n  exit 1;\nfi/gp' | sed -e 's/\\n/\n/g'
    exit $?;
    ;;
  # Make a file containing all code found in entire conversation with GPT. TODO filter by filetype
  M) 
    echo "[$(cat $CONVO)]" | jq '.[].content' | sed -n -E 's/.*```[a-z]*\\n(.*)\\n```.*/echo -e "\e[0;33m\1\e[0m"\n\1\nif [ $? -ne 0 ]; then\n  exit 1;\nfi\n/gp' | sed -e 's/\\n/\n/g'
    exit $?;
    ;;
  x) 
    echo "[$(cat $CONVO)]" | jq '.[-1].content' | sed -n -E 's/.*```[a-z]*\\n(.*)\\n```.*/echo -e \"\\e[0;33m\1\\e[0m\"\n\1\nif [ $? -ne 0 ]; then\n  exit 1;\nfi/gp' | sed -e 's/\\n/\n/g' > ./tmpScript
    chmod +x ./tmpScript
    ./tmpScript
    exit $?;
    ;;
  X)
    echo "[$(cat $CONVO)]" | jq '.[].content' | sed -n -E 's/.*```[a-z]*\\n(.*)\\n```.*/echo -e \"\\e[0;33m\1\\e[0m\"\n\1\nif [ $? -ne 0 ]; then\n  exit 1;\nfi/gp' | sed -e 's/\\n/\n/g' > ./tmpScript
    chmod +x ./tmpScript
    ./tmpScript
    exit $?;
    ;;
  h) display_help
    ;;
  C)
    if [ -e $CON_DIR/${OPTARG} ]; then
      rm $CON_DIR/${OPTARG}
    fi
    touch $CON_DIR/${OPTARG}
    CONVO=$CON_DIR/${OPTARG}
    rm -f $GPT_DIR/convo 2>/dev/null
    ln -s $CON_DIR/${OPTARG} $GPT_DIR/convo 2>/dev/null
    for f in "${FILES_TO_READ[@]}"; do
      if [ ! -z "$f" -a -e "$f" ]; then
        nLines=$(wc -l $f | awk '{print $1}')
        cLine=1
        while [ $cLine -lt $nLines ]; do
          toLine=$((cLine + 999))
          textBatch="$(sed -n $cLine,${toLine}p $f)"
          textBatch=$(echo $textBatch | sed -z 's/\\([\\r\\t\\f\"\$\\\\]\\)/\\\\\\1/g;')
          textBatch=$(echo $textBatch | jq -sRr @json | sed -E 's/\"(.*)\"/\\1/g')
          if [ $cLine -eq 1 ]; then
            appendConversation user "remember this: $textBatch"
          else
            appendConversation user "also remember this: $textBatch"
          fi
          ((cLine += 1000))
        done
      fi
    done
    FILES_TO_READ=()
    ;;
    # List available conversations in the convos directory.
    l)
    ls $CON_DIR
    ;;
    # Send a system message to ChatGPT.
    # This must be enclosed in quotes if you want to batch it together with a normal, user message.
    s)
    SYS_MSG="$OPTARG"
    ;;
  g)
    echo -e ${AUTOCOMPLETION_CMD}
    exit
    ;;
  i) IS_INTERACTIVE=true
    ;;
  f) FILES_TO_READ+=("$OPTARG")
    ;;
  *)
    echo -e "$_opt is an invalid option. Exiting...\n"
    exit 1
    ;;
esac
done


# If the symlinked "convo" file doesn't exist (points to our current conversation), 
# then delete the old "default" conversation and make a new convo point at a fresh one.
if [ ! -e $GPT_DIR/convo ]; then
  rm -f $CON_DIR/default 2>/dev/null
  rm -f $CONVO 2>/dev/null
  touch $CON_DIR/default
  ln -s $CON_DIR/default $CONVO 2>/dev/null # don't worry if parallel convos squabble over symlink
fi

# Read file(s) into conversation.
if [ ${#FILES_TO_READ[*]} -gt 0 ]; then
  for f in ${FILES_TO_READ[*]}; do
    if [ ! -z "$f" -a -e "$f" ]; then
      nLines=$(wc -l $f | awk '{print $1}')
      cLine=1
      while [ $cLine -lt $nLines ]; do
        toLine=$((cLine + 999))
        textBatch="$(sed -n $cLine,${toLine}p $f)"
        textBatch=$(echo $textBatch | sed -z 's/\([\r\t\f"$\\]\)/\\\1/g;')
        textBatch=$(echo $textBatch | jq -sRr @json | sed -E 's/"(.*)"/\1/g')
        if [ $cLine -eq 1 ]; then
          appendConversation user "remember this: $textBatch"
        else
          appendConversation user "also remember this: $textBatch"
        fi
        ((cLine += 1000))
      done
    fi
  done
fi

# Prevent sending ChatGPT empty messages.
shift $((OPTIND - 1))
input="$@"
if [ ${#FILES_TO_READ[*]} -eq 0 -a ! $IS_INTERACTIVE -a $# -lt 1 -a -z "$SYS_MSG" ]; then
  echo "$0: Don't bother sending an empty message. Exitting..."
  exit 1
fi

# Send the message or talk in a loop.
if $IS_INTERACTIVE; then
  appendConversation system $SYS_MSG
  while true; do
    echo -ne '\e[1;32m[You]:\e[m '; read newMsg
    if [ "$newMsg" = 'quit' -o "$newMsg" = 'q' -o "$newMsg" = 'exit' -o "$newMsg" = 'bye' ]; then
      echo -ne '\e[1;34m[GPT]:\e[m Bye!\n'
      exit 0
    fi
    appendConversation user $newMsg
    output=$(sendMsg)
    echo -ne '\e[1;34m[GPT]:\e[m '; procOutput "$output"
  done
else
  appendConversation system $SYS_MSG
  appendConversation user ${input}
  output=$(sendMsg)
  procOutput $output
fi
